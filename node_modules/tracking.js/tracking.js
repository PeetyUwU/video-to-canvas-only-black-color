'use strict'

var track = {},
  initializedResolve,
  loadedResolve,
  AWS_URL = '' // Update with the default API Gateway URL for your Kinesis Firehose.

var tracking = {
  initialized: new Promise(function (resolve) { initializedResolve = resolve }),
  loaded: new Promise(function (resolve) { loadedResolve = resolve }),
  init: function (endpointURL) {
    tracking.endpointURL = endpointURL || AWS_URL
    tracking.require('https://cdnjs.cloudflare.com/ajax/libs/node-uuid/1.4.7/uuid.min.js', function () {
      if (self.fetch) {
        initializedResolve()
        console.log('uuid loaded')
      } else {
        tracking.require('https://cdnjs.cloudflare.com/ajax/libs/fetch/1.0.0/fetch.min.js', function () {
          initializedResolve()
          console.log('uuid & fetch loaded')
        })
      }
    	})
  },
  require: function (url, callback) {
        // Adding the script tag to the head as suggested before
    var head = document.getElementsByTagName('head')[0]
    var script = document.createElement('script')
    script.type = 'text/javascript'
    script.src = url

        // Then bind the event to the callback function.
        // There are several events for cross browser compatibility.
    script.onreadystatechange = callback
    script.onload = callback

        // Fire the loading
    head.appendChild(script)
  },
  _load: function (em, app, cb) {
    tracking.initialized.then(function (result) {
      if (em && app) {
        track.event_id = uuid.v4()
        track.created_at = new Date().toISOString()
        track.email = em
        track.application = app
        track.browser = navigator.userAgent
        track.properties = []
        loadedResolve()
        cb(track)
      } else {
        cb(false)
      }
    })
  },
  _prop: function (prop, val, cb) {
    tracking.loaded.then(function (result) {
      var property = {}
      if (prop && val) {
        property.property = prop
        property.value = val
        track.properties.push(property)
        cb(track)
      } else {
        cb(false)
      }
    })
  },
  _trigger: function (cat, act, obj, cb) {
    tracking.loaded.then(function (result) {
      if (cat && act) {
        track.category = cat
        track.action = act
        track.object = obj
        fetch(tracking.endpointURL,
          {
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            method: 'POST',
            body: JSON.stringify(track)
          }, function (error, meta, body) {
            console.log(body.toString())
            cb(track)
          })
      } else {
        cb(false)
      }
    })
  }
}

if (typeof module !== 'undefined' && module.exports) {
  module.exports = tracking
} else {
  tracking.init()
}
